library(tidyverse)
library(here)
library(janitor)
library(GGally)
avocado <- read_csv(here("data/avocado.csv")) %>%
clean_names()
glimpse(avocado)
avocado %>%
summarise(across(.cols = everything(),
.fns = ~sum(is.na(.x))))
avocado %>%
distinct(year)
avocado %>%
distinct(type)
avocado %>%
distinct(region)
avocado %>%
group_by(year, type) %>%
summarise(avg_mean_price = mean(average_price))
avocado %>%
filter(region == "TotalUS") %>%
arrange(date)
avocado %>%
filter(region == "TotalUS") %>%
group_by(year, type) %>%
summarise(avg_mean_price = mean(average_price))
avocado %>%
filter(region == "TotalUS") %>%
ggplot() +
geom_line(aes(x = date, y = average_price, group = type, color = type))
avocado %>%
filter(region == "TotalUS") %>%
ggplot() +
geom_line(aes(x = date, y = total_volume, group = type, color = type))
avocado %>%
filter(region == "TotalUS") %>%
ggplot() +
geom_line(aes(x = date, y = x4046, group = type, color = type))
avocado %>%
filter(region == "TotalUS") %>%
ggplot() +
geom_line(aes(x = date, y = x4225, group = type, color = type))
avocado %>%
filter(region == "TotalUS") %>%
ggplot() +
geom_line(aes(x = date, y = x4770, group = type, color = type))
avocado %>%
filter(region == "TotalUS") %>%
ggplot() +
geom_line(aes(x = date, y = total_bags, group = type, color = type))
avocado %>%
filter(region == "TotalUS") %>%
ggplot() +
geom_line(aes(x = date, y = small_bags, group = type, color = type))
avocado %>%
filter(region == "TotalUS") %>%
ggplot() +
geom_line(aes(x = date, y = large_bags, group = type, color = type))
avocado %>%
filter(region == "TotalUS") %>%
ggplot() +
geom_line(aes(x = date, y = x_large_bags, group = type, color = type))
avocado %>%
filter(region == "West") %>%
ggplot() +
geom_line(aes(x = date, y = average_price, group = type, color = type))
avocado %>%
filter(region == "Northeast") %>%
ggplot() +
geom_line(aes(x = date, y = average_price, group = type, color = type))
avocado %>%
filter(region == "NewYork") %>%
ggplot() +
geom_line(aes(x = date, y = average_price, group = type, color = type))
impute_value <- avocado$average_price[avocado$date == "2015-06-28" & avocado$region == "TotalUS" & avocado$type == "organic"]
avocado_tidy <- avocado %>%
filter(region == "TotalUS") %>%
mutate(year = as.factor(year),
average_price = ifelse(
type == "organic" & average_price == 1,
impute_value,
average_price),
) %>%
mutate(across(.cols = total_volume:x_large_bags, .fns = ~scale(.x))) %>%
select(-c(x1, date, region, total_bags))
alias(average_price ~ ., data = avocado_tidy)
avocado_tidy_numeric <- avocado_tidy %>%
select_if(is.numeric)
avocado_tidy_nonnumeric <- avocado_tidy %>%
select_if(function(x) !is.numeric(x))
avocado_tidy_nonnumeric$average_price <- avocado_tidy$average_price
avocado_tidy_numeric %>%
ggscatmat()
avocado_tidy_nonnumeric %>%
ggpairs()
library(leaps)
regsubsets_forward <- regsubsets(average_price ~ ., data = avocado_tidy, nvmax = 9, method = "forward")
sum_regsubsets_forward <- summary(regsubsets_forward)
sum_regsubsets_forward
plot(regsubsets_forward, scale = "bic")
plot(sum_regsubsets_forward$rsq, type = "b")
plot(sum_regsubsets_forward$bic, type = "b")
plot(sum_regsubsets_forward$cp, type = "b")
summary(regsubsets_forward)$which[3,]
mod_with_year <- lm(average_price ~ x4225 + year, data = avocado_tidy)
summary(mod_with_year)
par(mfrow = c(2, 2))
plot(mod_with_year)
regsubsets_exhaustive <- regsubsets(average_price ~ ., data = avocado_tidy, nvmax = 9, method = "exhaustive")
sum_regsubsets_exhaustive <- summary(regsubsets_exhaustive)
sum_regsubsets_exhaustive
plot(sum_regsubsets_exhaustive$rsq, type = "b")
plot(sum_regsubsets_exhaustive$bic, type = "b")
summary(regsubsets_exhaustive)$which[4,]
mod_exhaustive_with_year <- lm(average_price ~ total_volume + x4770 + x_large_bags + type + year, data = avocado_tidy)
summary(mod_exhaustive_with_year)
par(mfrow = c(2, 2))
plot(mod_exhaustive_with_year)
library(glmulti)
glmulti_fit <- glmulti(
average_price ~ .,
data = avocado_tidy,
level = 2, # 2 = include pairwise interactions, 1 = main effects only (main effect = no pairwise interactions)
minsize = 0, # no min size of model
maxsize = -1, # -1 = no max size of model
marginality = TRUE, # marginality here means the same as 'strongly hierarchical' interactions, i.e. include pairwise interactions only if both predictors present in the model as main effects.
method = "g", # the problem is too large for exhaustive search, so search using a genetic algorithm
crit = bic, # criteria for model selection is BIC value (lower is better)
plotty = FALSE, # don't plot models as function runs
report = TRUE, # do produce reports as function runs
confsetsize = 100, # return best 100 solutions
fitfunction = lm # fit using the `lm` function
)
gmulti_fit
glmulti_fit
View(glmulti_fit)
summary(glmulti_fit)
plot(glmulti_fit$crit, type = "b")
glmulti_fit$crit
glmulti_fit$crit
plot(glmulti_fit$icvalues, type = "b")
plot(summary(glmulti_fit)$icvalues, type = "b")
plot(summary(glmulti_fit)$bic, type = "b")
# here is the best model (lowest BIC) from the glmulti run above
mod_interact <- lm(average_price ~ 1 + year + total_volume + x4046 + x4225 + x4770 +
small_bags + large_bags + type + small_bags:total_volume +
small_bags:x4225 + large_bags:total_volume + large_bags:x4046 +
type:total_volume + type:x4225 + type:x4770 + type:small_bags +
year:small_bags + year:type,
data = insurance)
# here is the best model (lowest BIC) from the glmulti run above
mod_interact <- lm(average_price ~ 1 + year + total_volume + x4046 + x4225 + x4770 +
small_bags + large_bags + type + small_bags:total_volume +
small_bags:x4225 + large_bags:total_volume + large_bags:x4046 +
type:total_volume + type:x4225 + type:x4770 + type:small_bags +
year:small_bags + year:type,
data = avocado_tidy)
summary(mod_interact)
# let's see diagnostic plots
par(mfrow = c(2, 2))
plot(mod_interact)
# calculate predictor importances. This will take a while to run, as lmg tries all possible orders of including predictors!
library(relaimpo)
install.packages("relaimpo#")
library(relaimpo)
install.packages("relaimpo")
# calculate predictor importances. This will take a while to run, as lmg tries all possible orders of including predictors!
library(relaimpo)
calc.relimp(mod_interact, type = "lmg", rela = TRUE)
q()
