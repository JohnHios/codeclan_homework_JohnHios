s_four_dice <- rolldie(4)
# event space for a roll of four dice equal to 5, 6 or 7
s_four_dice %>%
mutate(event_space = rowSums(.)) %>% # equal to coding event_space = X1 + X2 + X3 + X4
dplyr::filter(event_space %in% c(5, 6, 7)) %>%
summarise(size_of_event_space = n())
# probability for a roll of four dice equal to 5, 6 or 7
s_four_dice %>%
mutate(event_space = rowSums(.)) %>%
dplyr::filter(event_space %in% c(5, 6, 7)) %>%
summarise(prob = n() / nrow(s_four_dice))
# The above probability assumes that the dice rolls are independent
# sample space for roll of four dice
s_four_dice <- rolldie(4)
# event space for a roll of four dice equal to 5, 6 or 7
s_four_dice %>%
mutate(total = rowSums(.)) %>% # equal to coding total = X1 + X2 + X3 + X4
dplyr::filter(total %in% c(5, 6, 7)) %>%
summarise(size_of_event_space = n())
# probability for a roll of four dice equal to 5, 6 or 7
s_four_dice %>%
mutate(total = rowSums(.)) %>%
dplyr::filter(total %in% c(5, 6, 7)) %>%
summarise(prob = n() / nrow(s_four_dice))
# The above probability assumes that the dice rolls are independent
factorial(5)
people <- c(1:10)
people
# create vector of choices contains 5 people, n = 5.
people <- c(1:5)
people
# Choose all five at a time, r = 5
# Don't replace a person once chosen: repeats.allowed = FALSE
seniors <- as_tibble(permutations(n = 5, r = 5, v = people, repeats.allowed = FALSE))
seniors
# create vector of increasing heights - contains 5 people, n = 5.
heights <- c(1:5)
# Choose all five people at a time, r = 5
# Don't replace a person once chosen: repeats.allowed = FALSE
chairs <- as_tibble(permutations(n = 5, r = 5, v = heights, repeats.allowed = FALSE))
# rename the variables in chairs to something better
chairs <- chairs %>%
rename(
chair1 = V1,
chair2 = V2,
chair3 = V3,
chair4 = V4,
chair5 = V5
)
# let's see what the chairs matrix looks like
chairs
# create vector of increasing heights - contains 5 people, n = 5.
heights <- c(1:5)
# Choose all five people at a time, r = 5
# Don't replace a person once chosen: repeats.allowed = FALSE
chairs <- as_tibble(permutations(n = 5, r = 5, v = heights, repeats.allowed = FALSE))
# rename the variables in chairs to something better
chairs <- chairs %>%
rename(
chair1 = V1,
chair2 = V2,
chair3 = V3,
chair4 = V4,
chair5 = V5
)
# let's see what the chairs matrix looks like
chairs
# Get the event space
chairs_decreasing_height <- chairs %>%
filter(chair1 == 5, chair2 == 4, chair3 == 3, chair4 == 2, chair5 == 1)
chairs_decreasing_height
# create vector of increasing heights - contains 5 people, n = 5.
heights <- c(1:5)
# Choose all five people at a time, r = 5
# Don't replace a person once chosen: repeats.allowed = FALSE
chairs <- as_tibble(permutations(n = 5, r = 5, v = heights, repeats.allowed = FALSE))
# rename the variables in chairs to something better
chairs <- chairs %>%
rename(
chair1 = V1,
chair2 = V2,
chair3 = V3,
chair4 = V4,
chair5 = V5
)
# let's see what the chairs matrix looks like
chairs
# Get the event space (filter) and then calculate the prob (summarise)
chairs %>%
filter(chair1 == 5, chair2 == 4, chair3 == 3, chair4 == 2, chair5 == 1) %>%
summarise(prob = n() / nrow(chairs))
1/120
factorial(6)
# create vector of increasing dye numbers - contains 6 dice, n = 6.
dice_event <- c(1:6)
# Roll all six dice at a time, r = 6
# Don't replace a person once chosen: repeats.allowed = FALSE
chairs <- as_tibble(permutations(n = 6, r = 6, v = dice_event, repeats.allowed = TRUE))
dice <- as_tibble(permutations(n = 6, r = 6, v = dice_event, repeats.allowed = TRUE))
dice
6^6
# create vector of increasing die numbers - contains 6 dice, n = 6.
dice_event <- c(1:6)
# Roll all six dice at a time, r = 6
# repeats.allowed = TRUE
dice <- as_tibble(permutations(n = 6, r = 6, v = dice_event, repeats.allowed = TRUE))
# rename the variables in dice to something better
dice <- dice %>%
rename(
die1 = V1,
die2 = V2,
die3 = V3,
die4 = V4,
die5 = V5,
die6 = V6
)
# let's see what the dice matrix looks like
dice
# Get the event space (filter) and then calculate the prob (summarise)
dice %>%
filter(die1 == 6, die2 == 5, die3 == 4, die4 == 3, die5 == 2, die6 == 1) %>%
summarise(prob = n() / nrow(dice))
c(6:1)
dice %>%
filter(isin(., c(6:1), ordered = TRUE) %>%
summarise(prob = n() / nrow(dice))
dice %>%
?isin()
dice
dice %>%
filter(isin(., c(6:1), ordered = TRUE)
dice %>%
dice
dice %>%
filter(isin(., c(6:1), ordered = TRUE))
dice %>%
filter(die1 == 6, die2 == 5, die3 == 4, die4 == 3, die5 == 2, die6 == 1) %>%
summarise(prob = n() / nrow(dice))
dice %>%
filter(isin(., c(6:1), ordered = TRUE)) %>%
summarise(prob = n() / nrow(dice))
dice %>%
filter(isin(., c(6:1), ordered = TRUE))
dice %>%
filter(isin(., c(6:1), ordered = TRUE)) %>%
summarise(prob = n() / nrow(dice))
dice %>%
filter(isin(., c(6:1), ordered = FALSE))
dice %>%
filter(isin(., c(6:1), ordered = FALSE)) %>%
summarise(prob = n() / nrow(dice))
# create vector of increasing die numbers - contains 6 dice, n = 6.
dice_event <- c(1:6)
# Roll all six dice at a time, r = 6
# repeats.allowed = TRUE
dice <- as_tibble(permutations(n = 6, r = 6, v = dice_event, repeats.allowed = TRUE))
# rename the variables in dice to something better
dice <- dice %>%
rename(
die1 = V1,
die2 = V2,
die3 = V3,
die4 = V4,
die5 = V5,
die6 = V6
)
# let's see what the dice matrix looks like
dice
# Get the event space (filter) and then calculate the prob (summarise) of seeing
# the numbers 6, 5, 4, 3, 2 and 1 in order on the dice, left to right
dice %>%
filter(isin(., c(6:1), ordered = TRUE)) %>%
summarise(prob = n() / nrow(dice))
# Get the event space (filter) and then calculate the prob (summarise) of seeing
# each of the numbers 6, 5, 4, 3, 2 and 1 on the dice regardless of order
dice %>%
filter(isin(., c(6:1), ordered = FALSE)) %>%
summarise(prob = n() / nrow(dice))
# create vector of increasing die numbers - contains 6 dice, n = 6.
dice_event <- c(1:6)
# Roll all six dice at a time, r = 6
# repeats.allowed = TRUE
dice <- as_tibble(permutations(n = 6, r = 6, v = dice_event, repeats.allowed = TRUE))
# rename the variables in dice to something better
dice <- dice %>%
rename(
die1 = V1,
die2 = V2,
die3 = V3,
die4 = V4,
die5 = V5,
die6 = V6
)
# let's see what the dice matrix looks like
dice
# Get the event space (filter) and then calculate the prob (summarise) of seeing
# the numbers 6, 5, 4, 3, 2 and 1 in order on the dice, left to right
dice %>%
filter(isin(., c(6:1), ordered = TRUE)) %>%
summarise(prob_ordered = n() / nrow(dice))
# Get the event space (filter) and then calculate the prob (summarise) of seeing
# each of the numbers 6, 5, 4, 3, 2 and 1 on the dice regardless of order
dice %>%
filter(isin(., c(6:1), ordered = FALSE)) %>%
summarise(prob_order_not_matter = n() / nrow(dice))
?cards
cards(jokers = FALSE, makespace = FALSE)
cards(makespace = TRUE)
cards(jokers = TRUE, makespace = FALSE)
cards(jokers = FALSE, makespace = FALSE)
cards(jokers = FALSE, makespace = TRUE)
cards(jokers = FALSE, makespace = FALSE)
cards(jokers = FALSE, makespace = FALSE) %>%
mutate(black_card = suit == "Spade" | suit == "Club")
cards(jokers = FALSE, makespace = FALSE) %>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE & suit == "Spades")
cards(jokers = FALSE, makespace = FALSE) %>%
mutate(black_card = suit == "Spade" | suit == "Club")
cards(jokers = FALSE, makespace = FALSE) %>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE & suit == "Spade")
cards(jokers = FALSE, makespace = FALSE) %>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black_spades = n() / nrow(dice))
cards(jokers = FALSE, makespace = FALSE) %>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE)
cards(jokers = FALSE, makespace = FALSE) %>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE & suit == "Spade") %>%
summarise(prob_black = n() / nrow(cards))
deck <- cards(jokers = FALSE, makespace = FALSE) %>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE & suit == "Spade") %>%
summarise(prob_black = n() / nrow(deck))
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE & suit == "Spade") %>%
summarise(prob_black = n() / nrow(deck))
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE & suit == "Spade") %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE & suit == "Spade") %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = sum(black_card) / n()
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = sum(black_card) / n())
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_spade_and_black = sum(black_card) / n())
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade") %>%
summarise(prob_spade_and_black = sum(black_card) / n())
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade") %>%
summarise(prob_spade_and_black = n() /sum(black_card))
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_spade_and_black = sum(suit) / n())
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_spade_and_black = sum(suit) / n())
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE)
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_spade_and_black = sum(black_card) / nrow(dec))
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_spade_and_black = sum(black_card) / nrow(deck))
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = sum(suit) / nrow(deck))
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = sum(suit) / n()))
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE)
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = sum(suit) / n()))
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = n()))
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = n())
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = sum(suit) / n())
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = sum() / n())
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE)
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = n() / nrow())
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = n() / n())
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = n() / nrow(deck))
deck <- cards(jokers = FALSE, makespace = FALSE)
prob_black <- deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
prob_spade_and_black <- ddeck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = n() / nrow(deck))
deck <- cards(jokers = FALSE, makespace = FALSE)
prob_black <- deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
prob_spade_and_black <- deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = n() / nrow(deck))
prob_spade_given_black = prob_spade_and_black / prob_black
deck <- cards(jokers = FALSE, makespace = FALSE)
prob_black <- deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
prob_spade_and_black <- deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = n() / nrow(deck))
prob_spade_given_black = prob_spade_and_black / prob_black
prob_spade_given_black
prob_cb_and_male <- cb %>%
dplyr::filter(bio_sex == "male" & cblind == TRUE) %>%
summarise(prob = n() / nrow(cb))
prob_cb_and_male
prob_male <- cb %>%
dplyr::filter(bio_sex == "male") %>%
summarise(prob = n() / nrow(cb))
prob_male
prob_cb_male = prob_cb_and_male / prob_male
prob_cb_male
deck <- cards(jokers = FALSE, makespace = FALSE)
prob_black <- deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
prob_spade_and_black <- deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = n() / nrow(deck))
prob_spade_given_black = prob_spade_and_black / prob_black
prob_spade_given_black
deck <- cards(jokers = FALSE, makespace = FALSE)
prob_black <- deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck)) %>%
pull()
prob_spade_and_black <- deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = n() / nrow(deck))%>%
pull()
prob_spade_given_black = prob_spade_and_black / prob_black
prob_spade_given_black
q()
