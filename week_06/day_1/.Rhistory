deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = sum(suit) / n()))
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE)
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = sum(suit) / n()))
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = n()))
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = n())
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = sum(suit) / n())
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = sum() / n())
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE)
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = n() / nrow())
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = n() / n())
deck <- cards(jokers = FALSE, makespace = FALSE)
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = n() / nrow(deck))
deck <- cards(jokers = FALSE, makespace = FALSE)
prob_black <- deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
prob_spade_and_black <- ddeck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = n() / nrow(deck))
deck <- cards(jokers = FALSE, makespace = FALSE)
prob_black <- deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
prob_spade_and_black <- deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = n() / nrow(deck))
prob_spade_given_black = prob_spade_and_black / prob_black
deck <- cards(jokers = FALSE, makespace = FALSE)
prob_black <- deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
prob_spade_and_black <- deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = n() / nrow(deck))
prob_spade_given_black = prob_spade_and_black / prob_black
prob_spade_given_black
prob_cb_and_male <- cb %>%
dplyr::filter(bio_sex == "male" & cblind == TRUE) %>%
summarise(prob = n() / nrow(cb))
prob_cb_and_male
prob_male <- cb %>%
dplyr::filter(bio_sex == "male") %>%
summarise(prob = n() / nrow(cb))
prob_male
prob_cb_male = prob_cb_and_male / prob_male
prob_cb_male
deck <- cards(jokers = FALSE, makespace = FALSE)
prob_black <- deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck))
prob_spade_and_black <- deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = n() / nrow(deck))
prob_spade_given_black = prob_spade_and_black / prob_black
prob_spade_given_black
deck <- cards(jokers = FALSE, makespace = FALSE)
prob_black <- deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck)) %>%
pull()
prob_spade_and_black <- deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = n() / nrow(deck))%>%
pull()
prob_spade_given_black = prob_spade_and_black / prob_black
prob_spade_given_black
q()
knitr::include_graphics("images/RMS_Titanic.jpg")
knitr::include_graphics("images/RMS_Titanic.jpg")
library(prob)
library(gtools)
library(tidyverse)
library(prob)
library(gtools)
library(tidyverse)
titanic <- read_csv("data/titanic.csv")
glimpse(titanic)
titanic %>%
distinct(class) %>%
pull()
titanic %>%
distinct(survived) %>%
pull()
#prob(survived|crew) calculation
titanic %>%
mutate(crew = if_else(class %in% c("engineering crew",
"victualling crew",
"restaurant staff",
"deck crew"),
TRUE,
FALSE)) %>%
filter(survived == "yes" & crew == TRUE) %>%
summarise(prob_surv_crew = n() / nrow(titanic))
#prob(survived|passenger) calculation
titanic %>%
mutate(crew = if_else(class %in% c("engineering crew",
"victualling crew",
"restaurant staff",
"deck crew"),
TRUE,
FALSE)) %>%
filter(survived == "yes" & crew == FALSE) %>%
summarise(prob_surv_passenger = n() / nrow(titanic))
s_one_die <- rolldie(1)
s_one_die %>%
dplyr::filter(X1 < 5) %>%
summarise(prob = n() / nrow(s_one_die))
s_three_dice <- rolldie(3)
s_three_dice %>%
summarise(size_of_sample = n())
# sample space for roll of four dice
s_four_dice <- rolldie(4)
# event space for a roll of four dice equal to 5, 6 or 7
s_four_dice %>%
mutate(total = rowSums(.)) %>% # equal to coding: total = X1 + X2 + X3 + X4
dplyr::filter(total %in% c(5, 6, 7)) %>%
summarise(size_of_event_space = n())
# probability for a roll of four dice equal to 5, 6 or 7
s_four_dice %>%
mutate(total = rowSums(.)) %>%
dplyr::filter(total %in% c(5, 6, 7)) %>%
summarise(prob = n() / nrow(s_four_dice))
# The above probability assumes that the dice rolls are independent
# create vector of increasing heights - contains 5 people, n = 5.
heights <- c(1:5)
# Choose all five people at a time, r = 5
# Don't replace a person once chosen: repeats.allowed = FALSE
chairs <- as_tibble(permutations(n = 5, r = 5, v = heights, repeats.allowed = FALSE))
# rename the variables in chairs to something better
chairs <- chairs %>%
rename(
chair1 = V1,
chair2 = V2,
chair3 = V3,
chair4 = V4,
chair5 = V5
)
# let's see what the chairs matrix looks like
chairs
# Get the event space (filter) and then calculate the prob (summarise)
chairs %>%
filter(chair1 == 5, chair2 == 4, chair3 == 3, chair4 == 2, chair5 == 1) %>%
summarise(prob = n() / nrow(chairs))
# create vector of increasing die numbers - contains 6 dice, n = 6.
dice_event <- c(1:6)
# Roll all six dice at a time, r = 6
# repeats.allowed = TRUE
dice <- as_tibble(permutations(n = 6, r = 6, v = dice_event, repeats.allowed = TRUE))
# rename the variables in dice to something better
dice <- dice %>%
rename(
die1 = V1,
die2 = V2,
die3 = V3,
die4 = V4,
die5 = V5,
die6 = V6
)
# let's see what the dice matrix looks like
dice
# Get the event space (filter) and then calculate the prob (summarise) of seeing
# the numbers 6, 5, 4, 3, 2 and 1 in order on the dice, left to right
dice %>%
filter(isin(., c(6:1), ordered = TRUE)) %>%
summarise(prob_ordered = n() / nrow(dice))
# Get the event space (filter) and then calculate the prob (summarise) of seeing
# each of the numbers 6, 5, 4, 3, 2 and 1 on the dice regardless of order
dice %>%
filter(isin(., c(6:1), ordered = FALSE)) %>%
summarise(prob_order_not_matter = n() / nrow(dice))
deck <- cards(jokers = FALSE, makespace = FALSE)
prob_black <- deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck)) %>%
pull()
prob_spade_and_black <- deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = n() / nrow(deck))%>%
pull()
prob_spade_given_black = prob_spade_and_black / prob_black
prob_spade_given_black
#prob(survived|crew) calculation
prob_surv_crew <- titanic %>%
mutate(crew = if_else(class %in% c("engineering crew",
"victualling crew",
"restaurant staff",
"deck crew"),
TRUE,
FALSE)) %>%
filter(survived == "yes" & crew == TRUE) %>%
summarise(prob_surv_crew = n() / nrow(titanic))
prob_crew <- titanic %>%
mutate(crew = if_else(class %in% c("engineering crew",
"victualling crew",
"restaurant staff",
"deck crew"),
TRUE,
FALSE)) %>%
filter(crew == TRUE) %>%
summarise(prob_crew = n() / nrow(titanic))
prob_surv_given_crew <- prob_surv_crew / prob_crew
#prob(survived|passenger) calculation
titanic %>%
mutate(crew = if_else(class %in% c("engineering crew",
"victualling crew",
"restaurant staff",
"deck crew"),
TRUE,
FALSE)) %>%
filter(survived == "yes" & crew == FALSE) %>%
summarise(prob_surv_passenger = n() / nrow(titanic))
#prob(survived|crew) calculation
prob_surv_crew <- titanic %>%
mutate(crew = if_else(class %in% c("engineering crew",
"victualling crew",
"restaurant staff",
"deck crew"),
TRUE,
FALSE)) %>%
filter(survived == "yes" & crew == TRUE) %>%
summarise(prob_surv_crew = n() / nrow(titanic))
prob_crew <- titanic %>%
mutate(crew = if_else(class %in% c("engineering crew",
"victualling crew",
"restaurant staff",
"deck crew"),
TRUE,
FALSE)) %>%
filter(crew == TRUE) %>%
summarise(prob_crew = n() / nrow(titanic))
prob_surv_given_crew <- prob_surv_crew / prob_crew
prob_surv_given_crew
#prob(survived|passenger) calculation
titanic %>%
mutate(crew = if_else(class %in% c("engineering crew",
"victualling crew",
"restaurant staff",
"deck crew"),
TRUE,
FALSE)) %>%
filter(survived == "yes" & crew == FALSE) %>%
summarise(prob_surv_passenger = n() / nrow(titanic))
#prob(survived|crew) calculation
prob_surv_crew <- titanic %>%
mutate(crew = if_else(class %in% c("engineering crew",
"victualling crew",
"restaurant staff",
"deck crew"),
TRUE,
FALSE)) %>%
filter(survived == "yes" & crew == TRUE) %>%
summarise(prob_surv_crew = n() / nrow(titanic))
prob_crew <- titanic %>%
mutate(crew = if_else(class %in% c("engineering crew",
"victualling crew",
"restaurant staff",
"deck crew"),
TRUE,
FALSE)) %>%
filter(crew == TRUE) %>%
summarise(prob_crew = n() / nrow(titanic))
prob_surv_given_crew <- prob_surv_crew / prob_crew
prob_surv_given_crew
#prob(survived|passenger) calculation
prob_surv_psgr <- titanic %>%
mutate(crew = if_else(class %in% c("engineering crew",
"victualling crew",
"restaurant staff",
"deck crew"),
TRUE,
FALSE)) %>%
filter(survived == "yes" & crew == FALSE) %>%
summarise(prob_surv_passenger = n() / nrow(titanic))
prob_psgr <- titanic %>%
mutate(crew = if_else(class %in% c("engineering crew",
"victualling crew",
"restaurant staff",
"deck crew"),
TRUE,
FALSE)) %>%
filter(crew == FALSE) %>%
summarise(prob_psgr = n() / nrow(titanic))
prob_surv_given_psgr <- prob_surv_psgr / prob_psgr
prob_surv_given_psgr
0.3796507/0.2370787
library(prob)
library(gtools)
library(tidyverse)
library(prob)
library(gtools)
library(tidyverse)
titanic <- read_csv("data/titanic.csv")
glimpse(titanic)
titanic %>%
distinct(class) %>%
pull()
titanic %>%
distinct(survived) %>%
pull()
#prob(survived|crew) calculation
prob_surv_crew <- titanic %>%
mutate(crew = if_else(class %in% c("engineering crew",
"victualling crew",
"restaurant staff",
"deck crew"),
TRUE,
FALSE)) %>%
filter(survived == "yes" & crew == TRUE) %>%
summarise(prob_surv_crew = n() / nrow(titanic))
prob_crew <- titanic %>%
mutate(crew = if_else(class %in% c("engineering crew",
"victualling crew",
"restaurant staff",
"deck crew"),
TRUE,
FALSE)) %>%
filter(crew == TRUE) %>%
summarise(prob_crew = n() / nrow(titanic))
prob_surv_given_crew <- prob_surv_crew / prob_crew
prob_surv_given_crew
#prob(survived|passenger) calculation
prob_surv_psgr <- titanic %>%
mutate(crew = if_else(class %in% c("engineering crew",
"victualling crew",
"restaurant staff",
"deck crew"),
TRUE,
FALSE)) %>%
filter(survived == "yes" & crew == FALSE) %>%
summarise(prob_surv_passenger = n() / nrow(titanic))
prob_psgr <- titanic %>%
mutate(crew = if_else(class %in% c("engineering crew",
"victualling crew",
"restaurant staff",
"deck crew"),
TRUE,
FALSE)) %>%
filter(crew == FALSE) %>%
summarise(prob_psgr = n() / nrow(titanic))
prob_surv_given_psgr <- prob_surv_psgr / prob_psgr
prob_surv_given_psgr
s_one_die <- rolldie(1)
s_one_die %>%
dplyr::filter(X1 < 5) %>%
summarise(prob = n() / nrow(s_one_die))
s_three_dice <- rolldie(3)
s_three_dice %>%
summarise(size_of_sample = n())
# sample space for roll of four dice
s_four_dice <- rolldie(4)
# event space for a roll of four dice equal to 5, 6 or 7
s_four_dice %>%
mutate(total = rowSums(.)) %>% # equal to coding: total = X1 + X2 + X3 + X4
dplyr::filter(total %in% c(5, 6, 7)) %>%
summarise(size_of_event_space = n())
# probability for a roll of four dice equal to 5, 6 or 7
s_four_dice %>%
mutate(total = rowSums(.)) %>%
dplyr::filter(total %in% c(5, 6, 7)) %>%
summarise(prob = n() / nrow(s_four_dice))
# The above probability assumes that the dice rolls are independent
# create vector of increasing heights - contains 5 people, n = 5.
heights <- c(1:5)
# Choose all five people at a time, r = 5
# Don't replace a person once chosen: repeats.allowed = FALSE
chairs <- as_tibble(permutations(n = 5, r = 5, v = heights, repeats.allowed = FALSE))
# rename the variables in chairs to something better
chairs <- chairs %>%
rename(
chair1 = V1,
chair2 = V2,
chair3 = V3,
chair4 = V4,
chair5 = V5
)
# let's see what the chairs matrix looks like
chairs
# Get the event space (filter) and then calculate the prob (summarise)
chairs %>%
filter(chair1 == 5, chair2 == 4, chair3 == 3, chair4 == 2, chair5 == 1) %>%
summarise(prob = n() / nrow(chairs))
# create vector of increasing die numbers - contains 6 dice, n = 6.
dice_event <- c(1:6)
# Roll all six dice at a time, r = 6
# repeats.allowed = TRUE
dice <- as_tibble(permutations(n = 6, r = 6, v = dice_event, repeats.allowed = TRUE))
# rename the variables in dice to something better
dice <- dice %>%
rename(
die1 = V1,
die2 = V2,
die3 = V3,
die4 = V4,
die5 = V5,
die6 = V6
)
# let's see what the dice matrix looks like
dice
# Get the event space (filter) and then calculate the prob (summarise) of seeing
# the numbers 6, 5, 4, 3, 2 and 1 in order on the dice, left to right
dice %>%
filter(isin(., c(6:1), ordered = TRUE)) %>%
summarise(prob_ordered = n() / nrow(dice))
# Get the event space (filter) and then calculate the prob (summarise) of seeing
# each of the numbers 6, 5, 4, 3, 2 and 1 on the dice regardless of order
dice %>%
filter(isin(., c(6:1), ordered = FALSE)) %>%
summarise(prob_order_not_matter = n() / nrow(dice))
deck <- cards(jokers = FALSE, makespace = FALSE)
prob_black <- deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(black_card == TRUE) %>%
summarise(prob_black = sum(black_card) / nrow(deck)) %>%
pull()
prob_spade_and_black <- deck%>%
mutate(black_card = suit == "Spade" | suit == "Club") %>%
filter(suit == "Spade" & black_card == TRUE) %>%
summarise(prob_spade_and_black = n() / nrow(deck))%>%
pull()
prob_spade_given_black <- prob_spade_and_black / prob_black
prob_spade_given_black
