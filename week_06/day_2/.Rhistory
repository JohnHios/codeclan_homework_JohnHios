distinct()
mobile_phones %>%
group_by(brand) %>%
summarise(mobile_count = n()) %>%
slice_max(mobile_count)
samsung_stats <- mobile_phones %>%
filter(brand == "Samsung") %>%
summarise(
mean = mean(rating),
median = median(rating),
sd = sd(rating)
)
library(tidyverse)
library(janitor)
library(e1071)
library(skimr)
mobile_phones <- read_csv("data/20190928-items.csv") %>%
clean_names()
glimpse(mobile_phones)
mobile_phones %>%
summarise(across(.cols = everything(),
.fns = ~sum(is.na(.x))))
mobile_phones %>%
distinct(brand) %>%
distinct()
mobile_phones %>%
group_by(brand) %>%
summarise(mobile_count = n()) %>%
slice_max(mobile_count)
samsung_stats <- mobile_phones %>%
filter(brand == "Samsung") %>%
summarise(
mean = mean(rating),
median = median(rating),
sd = sd(rating)
)
View(mobile_phones)
samsung_stats <- mobile_phones %>%
filter(brand == "Samsung") %>%
summarise(
mean = mean(rating),
median = median(rating),
sd = sd(rating)
)
samsung_stats <- mobile_phones %>%
filter(brand = "Samsung") %>%
summarise(
mean = mean(rating),
median = median(rating),
sd = sd(rating)
)
samsung_stats <- mobile_phones %>%
filter(brand == "Samsung") %>%
summarise(
mean = mean(rating),
median = median(rating),
sd = sd(rating)
)
samsung_stats
mobile_phones
samsung_stats <- mobile_phones %>%
filter(brand == "Samsung") %>%
summarise(
mean = mean(rating),
median = median(rating),
sd = sd(rating)
)
library(tidyverse)
library(janitor)
library(e1071)
library(skimr)
mobile_phones <- read_csv("data/20190928-items.csv") %>%
clean_names()
glimpse(mobile_phones)
mobile_phones %>%
summarise(across(.cols = everything(),
.fns = ~sum(is.na(.x))))
mobile_phones %>%
distinct(brand) %>%
distinct()
mobile_phones %>%
group_by(brand) %>%
summarise(mobile_count = n()) %>%
slice_max(mobile_count)
samsung_stats <- mobile_phones %>%
filter(brand == "Samsung") %>%
summarise(
mean = mean(rating),
median = median(rating),
sd = sd(rating)
)
samsung_stats <- mobile_phones %>%
filter(brand == "Samsung") %>%
summarise(
mean = mean(rating),
median = median(rating),
sd = sd(rating)
)
samsung_stats <- mobile_phones %>%
filter(brand == "Samsung") %>%
summarise(
mean = mean(rating),
median = median(rating),
sd = sd(rating)
)
samsung_stats <- mobile_phones %>%
filter(brand == "Samsung") %>%
summarise(
mean = mean(rating),
median = median(rating),
sd = sd(rating)
)
samsung_stats <- mobile_phones %>%
# filter(brand == "Samsung") %>%
summarise(
mean = mean(rating),
median = median(rating),
sd = sd(rating)
)
samsung_stats
samsung_stats <- mobile_phones %>%
filter(brand == "Samsung") %>%
summarise(
mean = mean(rating),
median = median(rating),
sd = sd(rating)
)
View(mobile_phones)
mobile_phones %>%
filter(brand == "Samsung")
mobile_phones %>%
filter(brand == "Samsung")
mobile_phones %>%
filter(brand == "Samsung")
mobile_phones <- read_csv("data/20190928-items.csv")
View(mobile_phones)
samsung_stats <- mobile_phones %>%
filter(brand == "Samsung") %>%
summarise(
mean = mean(rating),
median = median(rating),
sd = sd(rating)
)
library(tidyverse)
library(janitor)
library(e1071)
library(skimr)
mobile_phones <- read_csv("data/20190928-items.csv") %>%
clean_names()
glimpse(mobile_phones)
mobile_phones %>%
summarise(across(.cols = everything(),
.fns = ~sum(is.na(.x))))
mobile_phones %>%
distinct(brand) %>%
distinct()
mobile_phones %>%
group_by(brand) %>%
summarise(mobile_count = n()) %>%
slice_max(mobile_count)
samsung_stats <- mobile_phones %>%
filter(brand == "Samsung") %>%
summarise(
mean = mean(rating),
median = median(rating),
sd = sd(rating)
)
samsung_stats
mobile_phones %>%
filter(brand == "Samsung") %>%
ggplot(aes(x = rating)) +
geom_histogram(aes(y = ..density..), col = "white", binwidth = 0.2) +
stat_function(
fun = dnorm,
args = list(
mean = samsung_stats$mean,
sd = samsung_stats$sd
),
col = "red"
)
samsung_ratings <- mobile_phones %>%
filter(brand == "Samsung") %>%
select(rating) %>%
mutate(z_rating = scale(rating))
samsung_ratings %>%
filter(!between(z_rating, left = -3, right = 3))
for (times_sd in 1:3){
# percentage calculation of normally distributed values lying within
# one-, two- and three standard deviations of the mean
ndist_prob_percent <- 100* (pnorm(q = times_sd) - pnorm(q = -times_sd) )
print(
paste(
"For normally distributed data,",
format(round(ndist_prob_percent, 1), nsmall = 1), "%",
"of the observations should fall between +/-", times_sd,
"x (standard deviation)"
)
)
# percentage calculation of Samsung data lying within
# one-, two- and three standard deviations of the mean
samsung_ratings <- mobile_phones %>%
filter(brand == "Samsung") %>%
select(rating) %>%
mutate(z_rating = scale(rating))
count <- samsung_ratings %>%
filter(between(z_rating, left = -times_sd, right = times_sd)) %>%
nrow()
samsung_percent <- 100* count / nrow(samsung_ratings)
print(
paste(
"For the Samsung data,",
format(round(samsung_percent, 1), nsmall = 1), "%",
"of the observations fall between +/-", times_sd,
"x (standard deviation)"
)
)
cat("\n")
}
qqnorm(samsung_ratings$rating)
mobile_phones %>%
filter(brand == "Samsung") %>%
ggplot(aes(x = rating)) +
geom_histogram(col = "white", binwidth = 0.2) +
stat_function(
fun = dnorm,
args = list(
mean = samsung_stats$mean,
sd = samsung_stats$sd
),
col = "red"
)
mobile_phones %>%
filter(brand == "Samsung") %>%
ggplot(aes(x = rating)) +
geom_histogram(aes(y = ..density..), col = "white", binwidth = 0.2) +
stat_function(
fun = dnorm,
args = list(
mean = samsung_stats$mean,
sd = samsung_stats$sd
),
col = "red"
)
samsung_ratings <- mobile_phones %>%
filter(brand == "Samsung") %>%
select(rating) %>%
mutate(z_rating = scale(rating))
samsung_ratings %>%
filter(!between(z_rating, left = -3, right = 3)) %>%
summarise()
samsung_ratings <- mobile_phones %>%
filter(brand == "Samsung") %>%
select(rating) %>%
mutate(z_rating = scale(rating))
samsung_ratings %>%
filter(!between(z_rating, left = -3, right = 3)) %>%
summarise(rating, z_rating)
samsung_ratings <- mobile_phones %>%
filter(brand == "Samsung") %>%
select(rating) %>%
mutate(z_rating = scale(rating))
samsung_ratings %>%
filter(!between(z_rating, left = -3, right = 3)) %>%
group_by(rating) %>%
summarise(rating, z_rating)
samsung_ratings <- mobile_phones %>%
filter(brand == "Samsung") %>%
select(rating) %>%
mutate(z_rating = scale(rating))
samsung_ratings %>%
filter(!between(z_rating, left = -3, right = 3))
samsung_ratings <- mobile_phones %>%
filter(brand == "Samsung") %>%
select(rating) %>%
mutate(z_rating = scale(rating))
samsung_ratings %>%
filter(!between(z_rating, left = -3, right = 3)) %>%
distinct(rating)
samsung_ratings <- mobile_phones %>%
filter(brand == "Samsung") %>%
select(rating) %>%
mutate(z_rating = scale(rating))
samsung_ratings %>%
filter(!between(z_rating, left = -3, right = 3)) %>%
distinct(rating, z_rating)
?distinct
samsung_ratings <- mobile_phones %>%
filter(brand == "Samsung") %>%
select(rating) %>%
mutate(z_rating = scale(rating))
samsung_ratings %>%
filter(!between(z_rating, left = -3, right = 3)) %>%
distinct(rating, .keep_all = TRUE )
samsung_ratings <- mobile_phones %>%
filter(brand == "Samsung") %>%
select(rating, prices, title) %>%
mutate(z_rating = scale(rating))
samsung_ratings %>%
filter(!between(z_rating, left = -3, right = 3)) %>%
distinct(rating, .keep_all = TRUE )
samsung_ratings <- mobile_phones %>%
filter(brand == "Samsung") %>%
select(rating, prices, title) %>%
mutate(z_rating = scale(rating))
samsung_ratings %>%
filter(!between(z_rating, left = -3, right = 3)) %>%
distinct(rating, z_rating )
samsung_ratings <- mobile_phones %>%
filter(brand == "Samsung") %>%
select(rating, prices, title) %>%
mutate(z_rating = scale(rating))
samsung_ratings %>%
filter(!between(z_rating, left = -3, right = 3)) %>%
distinct(rating, title )
samsung_ratings <- mobile_phones %>%
filter(brand == "Samsung") %>%
select(rating) %>%
mutate(z_rating = scale(rating))
samsung_ratings %>%
filter(!between(z_rating, left = -3, right = 3)) %>%
distinct(rating, .keep_all = TRUE)
library(tidyverse)
dice <- tibble(
x = 1:6,
f_x = replicate(6, 1/6)
)
dice %>%
ggplot(aes(x = x, y = f_x)) +
geom_col() +
xlab("number rolled on dice") +
ylab("probability") +
scale_x_continuous(breaks = 1:6)
dice <- tibble(
x = 1:6,
f_x = replicate(6, 1/6)
) %>%
mutate(F_x = cumsum(f_x))
dice %>%
ggplot(aes(x = x, y = F_x)) +
geom_step() +
xlab("number rolled on die") +
ylab("probability") +
scale_x_continuous(breaks = 1:6) +
scale_y_continuous(breaks = seq(0,1,0.1)) +
ylim(0,1)
brain_breaks <- tibble(
l = seq(4, 23, by = 0.001),
f_l = dunif(x = l, min = 5, max = 22)
)
brain_breaks %>%
ggplot(aes(x  = l, y = f_l)) +
geom_line() +
ylim(0, 0.075) +
xlab("l (minutes)") +
ylab("f_l (probability density)")
punif(q = 10.751, min = 5, max = 22) - punif(q = 8.4, min = 5, max = 22)
brain_breaks %>%
ggplot(aes(x = l, y = f_l)) +
geom_line() +
geom_ribbon(aes(
ymin = 0, ymax = ifelse(l >= 8.4 & l <= 10.751, f_l, 0)),
fill = "red",
alpha = 0.6)
three_norm <- tibble(
x = seq(0, 20, 0.1),
f1_x = dnorm(x = x, mean = 10, sd = 1),
f2_x = dnorm(x = x, mean = 10, sd = 2),
f3_x = dnorm(x = x, mean = 10, sd = 3)
)
three_norm %>%
ggplot() +
geom_line(aes(x = x, y = f1_x), col = "black") +
geom_line(aes(x = x, y = f2_x), col = "red") +
geom_line(aes(x = x, y = f3_x), col = "blue")
library(janitor)
jobs <- read_csv("data/TyrellCorpJobs.csv") %>%
clean_names()
jobs
account_salary_stats <- jobs %>%
filter(position == "Accounting") %>%
summarise(
num = n(),
mean = mean(salary),
sd = sd(salary)
)
account_salary_stats
jobs %>%
filter(position == "Accounting") %>%
ggplot(aes(x = salary)) +
geom_histogram(aes(y = ..density..), col = "white", bins = 25) +
stat_function(
fun = dnorm,
args = list(
mean = account_salary_stats$mean,
sd = account_salary_stats$sd
),
col = "red"
)
# aes(y = ..density..) tells the histogram to calculate the Probability mass function
management_scaled <- jobs %>%
filter(position == "Management") %>%
mutate(z_salary = scale(salary))
management_scaled
management_scaled %>%
filter(!between(z_salary, left = -3, right = 3))
standard_normal <- tibble(
z = seq(from = -4, to = 4, by = 0.01),
f_z = dnorm(x = z)
)
standard_normal %>%
ggplot(aes(x = z, y = f_z)) +
geom_line()
pnorm(q = 0)
shade_standard_normal <- function(shade_from, shade_to){
standard_normal <- tibble(
z = seq(from = -4, to = 4, by = 0.001),
f_z = dnorm(x = z)
)
standard_normal %>%
ggplot(aes(x = z, y = f_z)) +
geom_line() +
geom_ribbon(aes(ymin = 0, ymax = ifelse(z >= shade_from & z <= shade_to, f_z, 0)), fill = "red", alpha = 0.6)
}
shade_standard_normal(shade_from = -Inf, shade_to = 0)
shade_standard_normal <- function(shade_from, shade_to){
standard_normal <- tibble(
z = seq(from = -4, to = 4, by = 0.001),
f_z = dnorm(x = z)
)
standard_normal %>%
ggplot(aes(x = z, y = f_z)) +
geom_line() +
geom_ribbon(aes(ymin = 0, ymax = ifelse(z >= shade_from & z <= shade_to, f_z, 0)), fill = "red", alpha = 0.6)
}
shade_standard_normal(shade_from = -Inf, shade_to = -3)
prob_percent <- 100*pnorm(q = -3)
paste("The probability in percentage is:", format(round(prob_percent, 3), nsmall = 3), "%")
shade_standard_normal(shade_from = -Inf, shade_to = -2)
prob_percent <- 100*pnorm(q = -2)
paste("The probability in percentage is:", format(round(prob_percent, 3), nsmall = 3), "%")
shade_standard_normal(shade_from = -Inf, shade_to = -1)
prob_percent <- 100*pnorm(q = -1)
paste("The probability in percentage is:", format(round(prob_percent, 3), nsmall = 3), "%")
shade_standard_normal(shade_from = -Inf, shade_to = 1)
prob_percent <- 100*pnorm(q = 1)
paste("The probability in percentage is:", format(round(prob_percent, 3), nsmall = 3), "%")
shade_standard_normal(shade_from = -Inf, shade_to = Inf)
prob_percent <- 100*pnorm(q = Inf)
paste("The probability in percentage is:", format(round(prob_percent, 3), nsmall = 3), "%")
100* (pnorm(q = 1) - pnorm(q = -1) )
count <- management_scaled %>%
filter(between(z_salary, left = -1, right = 1)) %>%
nrow()
count /nrow(management_scaled)
100* (pnorm(q = 2) - pnorm(q = -2) )
count <- management_scaled %>%
filter(between(z_salary, left = -2, right = 2)) %>%
nrow()
count /nrow(management_scaled)
100* (pnorm(q = 3) - pnorm(q = -3) )
count <- management_scaled %>%
filter(between(z_salary, left = -3, right = 3)) %>%
nrow()
count /nrow(management_scaled)
qqnorm(samsung_ratings$rating)
qqline(samsung_ratings$rating)
for (times_sd in 1:3){
# percentage calculation of normally distributed values lying within
# one-, two- and three standard deviations of the mean
ndist_prob_percent <- 100* (pnorm(q = times_sd) - pnorm(q = -times_sd) )
print(
paste(
"For normally distributed data,",
format(round(ndist_prob_percent, 1), nsmall = 1),"%",
"of the observations should fall between +/-", times_sd,
"x (standard deviation)"
)
)
# percentage calculation of Samsung data lying within
# one-, two- and three standard deviations of the mean
samsung_ratings <- mobile_phones %>%
filter(brand == "Samsung") %>%
select(rating) %>%
mutate(z_rating = scale(rating))
count <- samsung_ratings %>%
filter(between(z_rating, left = -times_sd, right = times_sd)) %>%
nrow()
samsung_percent <- 100* count / nrow(samsung_ratings)
print(
paste(
"For the Samsung data,",
format(round(samsung_percent, 1), nsmall = 1),"%",
"of the observations fall between +/-", times_sd,
"x (standard deviation)"
)
)
cat("\n")
}
factorial(5)
0.99^100
0.99^99
0.99^98
0.99^95
q()
rep_sample_n?
?rep_sample_n
library(prob)
library(tidyverse)
?rep_sample_n
library(infer)
?rep_sample_n
q()
