"For normally distributed data,",
format(round(ndist_prob_percent, 1), nsmall = 1), "%",
"of the observations should fall between +/-", times_sd,
"x (standard deviation)"
)
mobile_phone_scaled <- mobile_phones %>%
filter(brand == "Samsung") %>%
select(rating) %>%
mutate(z_rating = scale(rating))
count <- mobile_phone_scaled %>%
filter(between(z_rating, left = -times_sd, right = times_sd)) %>%
nrow()
mobile_prob_percent <- 100* count /nrow(mobile_phone_scaled)
paste(
"For the Samsung data,",
format(round(mobile_prob_percent, 1), nsmall = 1), "%",
"of the observations fall between +/-", times_sd,
"x (standard deviation)"
)
for (times_sd in 1:3){
ndist_prob_percent <- 100* (pnorm(q = times_sd) - pnorm(q = -times_sd) )
paste(
"For normally distributed data,",
format(round(ndist_prob_percent, 1), nsmall = 1), "%",
"of the observations should fall between +/-", times_sd,
"x (standard deviation)"
)
mobile_phone_scaled <- mobile_phones %>%
filter(brand == "Samsung") %>%
select(rating) %>%
mutate(z_rating = scale(rating))
count <- mobile_phone_scaled %>%
filter(between(z_rating, left = -times_sd, right = times_sd)) %>%
nrow()
mobile_prob_percent <- 100* count /nrow(mobile_phone_scaled)
paste(
"For the Samsung data,",
format(round(mobile_prob_percent, 1), nsmall = 1), "%",
"of the observations fall between +/-", times_sd,
"x (standard deviation)"
)
}
for (times_sd in 1:3){
ndist_prob_percent <- 100* (pnorm(q = times_sd) - pnorm(q = -times_sd) )
print(paste(
"For normally distributed data,",
format(round(ndist_prob_percent, 1), nsmall = 1), "%",
"of the observations should fall between +/-", times_sd,
"x (standard deviation)"
)
)
mobile_phone_scaled <- mobile_phones %>%
filter(brand == "Samsung") %>%
select(rating) %>%
mutate(z_rating = scale(rating))
count <- mobile_phone_scaled %>%
filter(between(z_rating, left = -times_sd, right = times_sd)) %>%
nrow()
mobile_prob_percent <- 100* count /nrow(mobile_phone_scaled)
paste(
"For the Samsung data,",
format(round(mobile_prob_percent, 1), nsmall = 1), "%",
"of the observations fall between +/-", times_sd,
"x (standard deviation)"
)
}
for (times_sd in 1:3){
ndist_prob_percent <- 100* (pnorm(q = times_sd) - pnorm(q = -times_sd) )
print(
paste(
"For normally distributed data,",
format(round(ndist_prob_percent, 1), nsmall = 1), "%",
"of the observations should fall between +/-", times_sd,
"x (standard deviation)"
)
)
mobile_phone_scaled <- mobile_phones %>%
filter(brand == "Samsung") %>%
select(rating) %>%
mutate(z_rating = scale(rating))
count <- mobile_phone_scaled %>%
filter(between(z_rating, left = -times_sd, right = times_sd)) %>%
nrow()
mobile_prob_percent <- 100* count /nrow(mobile_phone_scaled)
print(
paste(
"For the Samsung data,",
format(round(mobile_prob_percent, 1), nsmall = 1), "%",
"of the observations fall between +/-", times_sd,
"x (standard deviation)"
)
)
}
for (times_sd in 1:3){
ndist_prob_percent <- 100* (pnorm(q = times_sd) - pnorm(q = -times_sd) )
print(
paste(
"For normally distributed data,",
format(round(ndist_prob_percent, 1), nsmall = 1), "%",
"of the observations should fall between +/-", times_sd,
"x (standard deviation)"
)
)
mobile_phone_scaled <- mobile_phones %>%
filter(brand == "Samsung") %>%
select(rating) %>%
mutate(z_rating = scale(rating))
count <- mobile_phone_scaled %>%
filter(between(z_rating, left = -times_sd, right = times_sd)) %>%
nrow()
mobile_prob_percent <- 100* count /nrow(mobile_phone_scaled)
print(
paste(
"For the Samsung data,",
format(round(mobile_prob_percent, 1), nsmall = 1), "%",
"of the observations fall between +/-", times_sd,
"x (standard deviation)"
)
)
\nb
for (times_sd in 1:3){
ndist_prob_percent <- 100* (pnorm(q = times_sd) - pnorm(q = -times_sd) )
print(
paste(
"For normally distributed data,",
format(round(ndist_prob_percent, 1), nsmall = 1), "%",
"of the observations should fall between +/-", times_sd,
"x (standard deviation)"
)
)
mobile_phone_scaled <- mobile_phones %>%
filter(brand == "Samsung") %>%
select(rating) %>%
mutate(z_rating = scale(rating))
count <- mobile_phone_scaled %>%
filter(between(z_rating, left = -times_sd, right = times_sd)) %>%
nrow()
mobile_prob_percent <- 100* count /nrow(mobile_phone_scaled)
print(
paste(
"For the Samsung data,",
format(round(mobile_prob_percent, 1), nsmall = 1), "%",
"of the observations fall between +/-", times_sd,
"x (standard deviation)"
)
)
cat("\n")
}
mobile_phone_scaled %>%
filter(!between(z_rating, left = -3, right = 3))
library(tidyverse)
library(janitor)
library(e1071)
library(skimr)
mobile_phones <- read_csv("data/20190928-items.csv") %>%
clean_names()
glimpse(mobile_phones)
mobile_phones %>%
summarise(across(.cols = everything(),
.fns = ~sum(is.na(.x))))
mobile_phones %>%
distinct(brand) %>%
distinct()
mobile_phones %>%
group_by(brand) %>%
summarise(mobile_count = n()) %>%
slice_max(mobile_count)
samsung_stats <- mobile_phones %>%
filter(brand == "Samsung") %>%
summarise(
mean = mean(rating),
median = median(rating),
sd = sd(rating)
)
samsung_stats
mobile_phones %>%
filter(brand == "Samsung") %>%
ggplot(aes(x = rating)) +
geom_histogram(aes(y = ..density..), col = "white", binwidth = 0.2) +
stat_function(
fun = dnorm,
args = list(
mean = samsung_stats$mean,
sd = samsung_stats$sd
),
col = "red"
)
mobile_phone_scaled <- mobile_phones %>%
filter(brand == "Samsung") %>%
select(rating) %>%
mutate(z_rating = scale(rating))
mobile_phone_scaled %>%
filter(!between(z_rating, left = -3, right = 3))
samsung_scaled <- mobile_phones %>%
filter(brand == "Samsung") %>%
select(rating) %>%
mutate(z_rating = scale(rating))
samsung_scaled %>%
filter(!between(z_rating, left = -3, right = 3))
for (times_sd in 1:3){
# percentage calculation of normally distributed values lying within
# one-, two- and three standard deviations of the mean
ndist_prob_percent <- 100* (pnorm(q = times_sd) - pnorm(q = -times_sd) )
print(
paste(
"For normally distributed data,",
format(round(ndist_prob_percent, 1), nsmall = 1), "%",
"of the observations should fall between +/-", times_sd,
"x (standard deviation)"
)
)
# percentage calculation of Samsung data lying within
# one-, two- and three standard deviations of the mean
samsung_scaled <- mobile_phones %>%
filter(brand == "Samsung") %>%
select(rating) %>%
mutate(z_rating = scale(rating))
count <- samsung_scaled %>%
filter(between(z_rating, left = -times_sd, right = times_sd)) %>%
nrow()
samsung_percent <- 100* count / nrow(samsung_scaled)
print(
paste(
"For the Samsung data,",
format(round(samsung_percent, 1), nsmall = 1), "%",
"of the observations fall between +/-", times_sd,
"x (standard deviation)"
)
)
cat("\n")
}
samsung_ratings <- samsung_scaled %>%
filter(rating >= samsung_stats$mean - samsung_stats$sd) %>%
filter(rating <= samsung_stats$mean + samsung_stats$sd) %>%
summarise(prop_within_1sd = n() / nrow(samsung_ratings))
samsung_ratings %>%
filter(rating >= samsung_stats$mean - samsung_stats$sd) %>%
filter(rating <= samsung_stats$mean + samsung_stats$sd) %>%
summarise(prop_within_1sd = n() / nrow(samsung_ratings))
View(samsung_stats)
View(samsung_scaled)
samsung_scaled %>%
filter(rating >= samsung_stats$mean - samsung_stats$sd) %>%
filter(rating <= samsung_stats$mean + samsung_stats$sd) %>%
summarise(prop_within_1sd = n() / nrow(samsung_ratings))
samsung_ratings <- samsung_scalled
samsung_ratings <- samsung_scaled
samsung_ratings %>%
filter(rating >= samsung_stats$mean - samsung_stats$sd) %>%
filter(rating <= samsung_stats$mean + samsung_stats$sd) %>%
summarise(prop_within_1sd = n() / nrow(samsung_ratings))
samsung_ratings <- mobile_phones %>%
filter(brand == "Samsung") %>%
select(rating) %>%
mutate(z_rating = scale(rating))
samsung_ratings %>%
filter(!between(z_rating, left = -3, right = 3))
for (times_sd in 1:3){
# percentage calculation of normally distributed values lying within
# one-, two- and three standard deviations of the mean
ndist_prob_percent <- 100* (pnorm(q = times_sd) - pnorm(q = -times_sd) )
print(
paste(
"For normally distributed data,",
format(round(ndist_prob_percent, 1), nsmall = 1), "%",
"of the observations should fall between +/-", times_sd,
"x (standard deviation)"
)
)
# percentage calculation of Samsung data lying within
# one-, two- and three standard deviations of the mean
samsung_ratings <- mobile_phones %>%
filter(brand == "Samsung") %>%
select(rating) %>%
mutate(z_rating = scale(rating))
count <- samsung_ratings %>%
filter(between(z_rating, left = -times_sd, right = times_sd)) %>%
nrow()
samsung_percent <- 100* count / nrow(samsung_ratings)
print(
paste(
"For the Samsung data,",
format(round(samsung_percent, 1), nsmall = 1), "%",
"of the observations fall between +/-", times_sd,
"x (standard deviation)"
)
)
cat("\n")
}
library(tidyverse)
library(janitor)
library(e1071)
library(skimr)
mobile_phones <- read_csv("data/20190928-items.csv") %>%
clean_names()
glimpse(mobile_phones)
mobile_phones %>%
summarise(across(.cols = everything(),
.fns = ~sum(is.na(.x))))
mobile_phones %>%
distinct(brand) %>%
distinct()
mobile_phones %>%
group_by(brand) %>%
summarise(mobile_count = n()) %>%
slice_max(mobile_count)
samsung_stats <- mobile_phones %>%
filter(brand == "Samsung") %>%
summarise(
mean = mean(rating),
median = median(rating),
sd = sd(rating)
)
samsung_stats
mobile_phones %>%
filter(brand == "Samsung") %>%
ggplot(aes(x = rating)) +
geom_histogram(aes(y = ..density..), col = "white", binwidth = 0.2) +
stat_function(
fun = dnorm,
args = list(
mean = samsung_stats$mean,
sd = samsung_stats$sd
),
col = "red"
)
samsung_ratings <- mobile_phones %>%
filter(brand == "Samsung") %>%
select(rating) %>%
mutate(z_rating = scale(rating))
samsung_ratings %>%
filter(!between(z_rating, left = -3, right = 3))
samsung_ratings %>%
filter(rating >= samsung_stats$mean - samsung_stats$sd) %>%
filter(rating <= samsung_stats$mean + samsung_stats$sd) %>%
summarise(prop_within_1sd = n() / nrow(samsung_ratings))
for (times_sd in 1:3){
# percentage calculation of normally distributed values lying within
# one-, two- and three standard deviations of the mean
ndist_prob_percent <- 100* (pnorm(q = times_sd) - pnorm(q = -times_sd) )
print(
paste(
"For normally distributed data,",
format(round(ndist_prob_percent, 1), nsmall = 1), "%",
"of the observations should fall between +/-", times_sd,
"x (standard deviation)"
)
)
# percentage calculation of Samsung data lying within
# one-, two- and three standard deviations of the mean
samsung_ratings <- mobile_phones %>%
filter(brand == "Samsung") %>%
select(rating) %>%
mutate(z_rating = scale(rating))
count <- samsung_ratings %>%
filter(between(z_rating, left = -times_sd, right = times_sd)) %>%
nrow()
samsung_percent <- 100* count / nrow(samsung_ratings)
print(
paste(
"For the Samsung data,",
format(round(samsung_percent, 1), nsmall = 1), "%",
"of the observations fall between +/-", times_sd,
"x (standard deviation)"
)
)
cat("\n")
}
for (times_sd in 1:3){
# percentage calculation of normally distributed values lying within
# one-, two- and three standard deviations of the mean
ndist_prob_percent <- 100* (pnorm(q = times_sd) - pnorm(q = -times_sd) )
print(
paste(
"For normally distributed data,",
format(round(ndist_prob_percent, 1), nsmall = 1), "%",
"of the observations should fall between +/-", times_sd,
"x (standard deviation)"
)
)
# percentage calculation of Samsung data lying within
# one-, two- and three standard deviations of the mean
samsung_ratings %>%
filter(rating >= samsung_stats$mean - times_sd * samsung_stats$sd) %>%
filter(rating <= samsung_stats$mean + times_sd * samsung_stats$sd) %>%
summarise(paste("prop_within_", times_sd, "sd") = n() / nrow(samsung_ratings))
for (times_sd in 1:3){
# percentage calculation of normally distributed values lying within
# one-, two- and three standard deviations of the mean
ndist_prob_percent <- 100* (pnorm(q = times_sd) - pnorm(q = -times_sd) )
print(
paste(
"For normally distributed data,",
format(round(ndist_prob_percent, 1), nsmall = 1), "%",
"of the observations should fall between +/-", times_sd,
"x (standard deviation)"
)
)
# percentage calculation of Samsung data lying within
# one-, two- and three standard deviations of the mean
samsung_ratings %>%
filter(rating >= samsung_stats$mean - samsung_stats$sd) %>%
filter(rating <= samsung_stats$mean + samsung_stats$sd) %>%
summarise(paste("prop_within_", "sd") = n() / nrow(samsung_ratings))
for (times_sd in 1:3){
# percentage calculation of normally distributed values lying within
# one-, two- and three standard deviations of the mean
ndist_prob_percent <- 100* (pnorm(q = times_sd) - pnorm(q = -times_sd) )
print(
paste(
"For normally distributed data,",
format(round(ndist_prob_percent, 1), nsmall = 1), "%",
"of the observations should fall between +/-", times_sd,
"x (standard deviation)"
)
)
# percentage calculation of Samsung data lying within
# one-, two- and three standard deviations of the mean
samsung_ratings %>%
filter(rating >= samsung_stats$mean - samsung_stats$sd) %>%
filter(rating <= samsung_stats$mean + samsung_stats$sd) %>%
summarise(prop_within_1sd  = n() / nrow(samsung_ratings))
# samsung_ratings <- mobile_phones %>%
#   filter(brand == "Samsung") %>%
#   select(rating) %>%
#   mutate(z_rating = scale(rating))
#
# count <- samsung_ratings %>%
#   filter(between(z_rating, left = -times_sd, right = times_sd)) %>%
#   nrow()
#
# samsung_percent <- 100* count / nrow(samsung_ratings)
#
# print(
#   paste(
#     "For the Samsung data,",
#     format(round(samsung_percent, 1), nsmall = 1), "%",
#     "of the observations fall between +/-", times_sd,
#     "x (standard deviation)"
#   )
# )
cat("\n")
}
for (times_sd in 1:3){
# percentage calculation of normally distributed values lying within
# one-, two- and three standard deviations of the mean
ndist_prob_percent <- 100* (pnorm(q = times_sd) - pnorm(q = -times_sd) )
print(
paste(
"For normally distributed data,",
format(round(ndist_prob_percent, 1), nsmall = 1), "%",
"of the observations should fall between +/-", times_sd,
"x (standard deviation)"
)
)
# percentage calculation of Samsung data lying within
# one-, two- and three standard deviations of the mean
samsung_ratings %>%
filter(rating >= samsung_stats$mean - samsung_stats$sd) %>%
filter(rating <= samsung_stats$mean + samsung_stats$sd) %>%
summarise(paste("prop_within_1sd") = n() / nrow(samsung_ratings))
for (times_sd in 1:3){
# percentage calculation of normally distributed values lying within
# one-, two- and three standard deviations of the mean
ndist_prob_percent <- 100* (pnorm(q = times_sd) - pnorm(q = -times_sd) )
print(
paste(
"For normally distributed data,",
format(round(ndist_prob_percent, 1), nsmall = 1), "%",
"of the observations should fall between +/-", times_sd,
"x (standard deviation)"
)
)
# percentage calculation of Samsung data lying within
# one-, two- and three standard deviations of the mean
samsung_ratings %>%
filter(rating >= samsung_stats$mean - samsung_stats$sd) %>%
filter(rating <= samsung_stats$mean + samsung_stats$sd) %>%
summarise(str("prop_within_1sd") = n() / nrow(samsung_ratings))
for (times_sd in 1:3){
# percentage calculation of normally distributed values lying within
# one-, two- and three standard deviations of the mean
ndist_prob_percent <- 100* (pnorm(q = times_sd) - pnorm(q = -times_sd) )
print(
paste(
"For normally distributed data,",
format(round(ndist_prob_percent, 1), nsmall = 1), "%",
"of the observations should fall between +/-", times_sd,
"x (standard deviation)"
)
)
# percentage calculation of Samsung data lying within
# one-, two- and three standard deviations of the mean
samsung_ratings <- mobile_phones %>%
filter(brand == "Samsung") %>%
select(rating) %>%
mutate(z_rating = scale(rating))
count <- samsung_ratings %>%
filter(between(z_rating, left = -times_sd, right = times_sd)) %>%
nrow()
samsung_percent <- 100* count / nrow(samsung_ratings)
print(
paste(
"For the Samsung data,",
format(round(samsung_percent, 1), nsmall = 1), "%",
"of the observations fall between +/-", times_sd,
"x (standard deviation)"
)
)
cat("\n")
}
q()
